{"meta":{"title":"东阿的博客","subtitle":"","description":"欢迎您的到来！","author":"东阿","url":"http://Dong-e1.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T10:26:36.249Z","comments":false,"path":"about/index.html","permalink":"http://dong-e1.github.io/about/index.html","excerpt":"","text":"pie title 关于我的学习情况 \"CSS/HTMl\" : 40 \"JavaScript\" : 20 \"nodeJs\" : 10 \"Vue\" : 20 \"Gulp,Webpack...\": 10 会越来越努力，未完待续…"},{"title":"时间轴","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:14.241Z","comments":false,"path":"archives/index.html","permalink":"http://dong-e1.github.io/archives/index.html","excerpt":"","text":""},{"title":"标题","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:31.735Z","comments":false,"path":"tags/index.html","permalink":"http://dong-e1.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:21.623Z","comments":false,"path":"categories/index.html","permalink":"http://dong-e1.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-21T11:45:43.739Z","comments":true,"path":"link/index.html","permalink":"http://dong-e1.github.io/link/index.html","excerpt":"","text":""}],"posts":[{"title":"NodeJs的安装配置","slug":"NodeJs的安装教程","date":"2021-05-21T02:30:20.000Z","updated":"2021-05-23T04:14:48.743Z","comments":false,"path":"2021/05/21/NodeJs的安装教程/","link":"","permalink":"http://dong-e1.github.io/2021/05/21/NodeJs%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"","text":"1.软件下载[下载官网地址]：Butterfly 下载首选文件后缀为.msi文件的安装包 2.软件介绍Node.js是一个基于Chrome V8引擎的JavaScript运行环境，让JavaScript运行在服务端的开发平台，使JavaScript成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。Node 使用事件驱动，非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。 3.软件安装1.点击下载的.msi文件进行安装 2.一直点击Next，遇到【I accept the…】则勾选继续Next，遇到【Change…】则更改安装路径，不建议C盘 3.一直Next，然后点击Install进行安装。 4.软件检测在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口 按下图分别输入node -v和npm -v进行检测，出现版本号则说明安装成功 5.Node配置说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，默认会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。所以要更改路径。 缓存路径更改 1.在node安装路径下创建node_cache和node_global两个文件夹 2.创建完两个空文件夹之后，打开cmd命令窗口，输入 “”中的路径是你创建文件夹的路径，记住更改 npm config set prefix \"D:\\Develop\\nodejs\\node_global\"npm config set cache \"D:\\Develop\\nodejs\\node_cache\" 这样此后所安装的模块都会安装到改路径下。 环境配置 1.node_path环境变量: 打开系统属性-高级-环境变量，在系统变量中新建 变量名 变量值 NODE_PATH D:\\Develop\\nodejs\\node_global\\node_modules（路径自己更改） 2.编辑用户变量中 path 将默认的 C 盘下 APPData/Roaming\\npm 修改为 D:\\Develop\\nodejs\\node_global 3.使用淘宝NPM镜像 由于国内网络环境限制问题，使用 npm 安装包时，会遇到时间长，甚至安装失败的问题，建议使用淘宝镜像，具体方法参见官网 可使用官方推荐的 cnpm 命令行工具代替默认的 npm: npm install -g cnpm --registry=https://registry.npm.taobao.org 注意：有时使用 cnpm 安装的路径可能回存在问题，例如在使用react-native开发应用时会出现问题。此时可以使用nrm切换淘宝源： npx nrm use taobao// 以下方式切换回官方源npx nrm use npm 4.测试 最后安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装： npm install express -g # -g是全局安装的意思 ​ 查看安装路径是否有文件。","categories":[{"name":"前端","slug":"前端","permalink":"http://dong-e1.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"node","slug":"node","permalink":"http://dong-e1.github.io/tags/node/"},{"name":"软件安装","slug":"软件安装","permalink":"http://dong-e1.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"Git基础用法","slug":"Git","date":"2021-05-20T09:30:20.000Z","updated":"2021-05-22T10:27:41.347Z","comments":false,"path":"2021/05/20/Git/","link":"","permalink":"http://dong-e1.github.io/2021/05/20/Git/","excerpt":"","text":"一.关于Git1. Git基础1.4 Git 基本工作流程 git仓库 暂存区 工作目录 用于存放提交记录 临时存放被修改文件 被Git管理的项目目录 1.5 Git 的使用1.5.1 Git 使用前配置在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。 配置提交人姓名：git config --global user.name 提交人姓名 配置提交人姓名：git config --global user.email 提交人邮箱 查看git配置信息：git config --list 注意 如果要对配置信息进行修改，重复上述命令即可。 配置只需要执行一次。 1.5.2 提交步骤 git init 初始化git仓库 git status 查看文件状态 git add 文件列表 追踪文件 git commit -m 提交信息 向仓库中提交代码 git log 查看提交记录 1.5.3 撤销 用暂存区中的文件覆盖工作目录中的文件： git checkout 文件 将文件从暂存区中删除： git rm --cached 文件 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：git rest --hard commitID 2. Git进阶2.1 分支为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。 使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。 2.1.1 分支细分 主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。 开发分支（develop）：作为开发的分支，基于 master 分支创建。 功能分支（feature）：作为开发具体功能的分支，基于开发分支创建 功能分支 -&gt; 开发分支 -&gt; 主分支 2.1.2 分支命令 git branch 查看分支 git branch 分支名称 创建分支 git checkout 分支名称 切换分支 git merge 来源分支 合并分支 git branch -d 分支名称 删除分支（分支被合并后才允许删除）（-D 强制删除） 2.2 暂时保存更改在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。 使用场景：分支临时切换 存储临时改动：git stash 恢复改动：git stash pop 3. Github在版本控制系统中，大约90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。 只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。 3.2 多人协作开发流程 A在自己的计算机中创建本地仓库 A在github中创建远程仓库 A将本地仓库推送到远程仓库 B克隆远程仓库到本地进行开发 B将本地仓库中开发的内容推送到远程仓库 A将远程仓库中的最新内容拉去到本地 3.3 创建仓库 git push 远程仓库地址 分支名称 git push 远程仓库地址别名 分支名称 git push -u 远程仓库地址别名 分支名称 -u 记住推送地址及分支，下次推送只需要输入git push即可 git remote add 远程仓库地址别名 远程仓库地址 3.4 拉取操作3.4.1 克隆仓库克隆远端数据仓库到本地：git clone 仓库地址 3.4.2 拉取远程仓库中最新的版本拉取远程仓库中最新的版本：git pull 远程仓库地址 分支名称 3.5 解决冲突在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。 3.6 跨团队协作 程序员 C fork仓库 程序员 C 将仓库克隆在本地进行修改 程序员 C 将仓库推送到远程 程序员 C 发起pull reqest 原仓库作者审核 原仓库作者合并代码 3.7 ssh免登陆https协议仓库地址：https://github.com/itcast-frontEnd/git-demo.git 生成秘钥：ssh-keygen 秘钥存储目录：C:\\Users\\用户\\.ssh 公钥名称：id_rsa.pub 私钥名称：id_rsa 3.8 GIT忽略清单将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。 git忽略清单文件名称：**.gitignore** 将工作目录中的文件全部添加到暂存区：git add .","categories":[{"name":"前端","slug":"前端","permalink":"http://dong-e1.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"git","slug":"git","permalink":"http://dong-e1.github.io/tags/git/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://dong-e1.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"node","slug":"node","permalink":"http://dong-e1.github.io/tags/node/"},{"name":"软件安装","slug":"软件安装","permalink":"http://dong-e1.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"git","slug":"git","permalink":"http://dong-e1.github.io/tags/git/"}]}