{"meta":{"title":"东阿的博客","subtitle":"","description":"欢迎您的到来！","author":"东阿","url":"http://Dong-e1.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T10:26:36.249Z","comments":false,"path":"about/index.html","permalink":"http://dong-e1.github.io/about/index.html","excerpt":"","text":"pie title 关于我的学习情况 \"CSS/HTMl\" : 40 \"JavaScript\" : 20 \"nodeJs\" : 10 \"Vue\" : 20 \"Gulp,Webpack...\": 10 会越来越努力，未完待续…"},{"title":"分类","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:21.623Z","comments":false,"path":"categories/index.html","permalink":"http://dong-e1.github.io/categories/index.html","excerpt":"","text":""},{"title":"时间轴","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:14.241Z","comments":false,"path":"archives/index.html","permalink":"http://dong-e1.github.io/archives/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-21T11:45:43.739Z","comments":true,"path":"link/index.html","permalink":"http://dong-e1.github.io/link/index.html","excerpt":"","text":""},{"title":"标题","date":"2021-05-20T16:00:00.000Z","updated":"2021-05-22T09:32:31.735Z","comments":false,"path":"tags/index.html","permalink":"http://dong-e1.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git基础用法","slug":"Git","date":"2021-05-20T09:30:20.000Z","updated":"2021-05-22T10:27:41.347Z","comments":false,"path":"2021/05/20/Git/","link":"","permalink":"http://dong-e1.github.io/2021/05/20/Git/","excerpt":"","text":"一.关于Git1. Git基础1.4 Git 基本工作流程 git仓库 暂存区 工作目录 用于存放提交记录 临时存放被修改文件 被Git管理的项目目录 1.5 Git 的使用1.5.1 Git 使用前配置在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。 配置提交人姓名：git config --global user.name 提交人姓名 配置提交人姓名：git config --global user.email 提交人邮箱 查看git配置信息：git config --list 注意 如果要对配置信息进行修改，重复上述命令即可。 配置只需要执行一次。 1.5.2 提交步骤 git init 初始化git仓库 git status 查看文件状态 git add 文件列表 追踪文件 git commit -m 提交信息 向仓库中提交代码 git log 查看提交记录 1.5.3 撤销 用暂存区中的文件覆盖工作目录中的文件： git checkout 文件 将文件从暂存区中删除： git rm --cached 文件 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：git rest --hard commitID 2. Git进阶2.1 分支为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。 使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。 2.1.1 分支细分 主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。 开发分支（develop）：作为开发的分支，基于 master 分支创建。 功能分支（feature）：作为开发具体功能的分支，基于开发分支创建 功能分支 -&gt; 开发分支 -&gt; 主分支 2.1.2 分支命令 git branch 查看分支 git branch 分支名称 创建分支 git checkout 分支名称 切换分支 git merge 来源分支 合并分支 git branch -d 分支名称 删除分支（分支被合并后才允许删除）（-D 强制删除） 2.2 暂时保存更改在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。 使用场景：分支临时切换 存储临时改动：git stash 恢复改动：git stash pop 3. Github在版本控制系统中，大约90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。 只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。 3.2 多人协作开发流程 A在自己的计算机中创建本地仓库 A在github中创建远程仓库 A将本地仓库推送到远程仓库 B克隆远程仓库到本地进行开发 B将本地仓库中开发的内容推送到远程仓库 A将远程仓库中的最新内容拉去到本地 3.3 创建仓库 git push 远程仓库地址 分支名称 git push 远程仓库地址别名 分支名称 git push -u 远程仓库地址别名 分支名称 -u 记住推送地址及分支，下次推送只需要输入git push即可 git remote add 远程仓库地址别名 远程仓库地址 3.4 拉取操作3.4.1 克隆仓库克隆远端数据仓库到本地：git clone 仓库地址 3.4.2 拉取远程仓库中最新的版本拉取远程仓库中最新的版本：git pull 远程仓库地址 分支名称 3.5 解决冲突在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。 3.6 跨团队协作 程序员 C fork仓库 程序员 C 将仓库克隆在本地进行修改 程序员 C 将仓库推送到远程 程序员 C 发起pull reqest 原仓库作者审核 原仓库作者合并代码 3.7 ssh免登陆https协议仓库地址：https://github.com/itcast-frontEnd/git-demo.git 生成秘钥：ssh-keygen 秘钥存储目录：C:\\Users\\用户\\.ssh 公钥名称：id_rsa.pub 私钥名称：id_rsa 3.8 GIT忽略清单将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。 git忽略清单文件名称：**.gitignore** 将工作目录中的文件全部添加到暂存区：git add .","categories":[{"name":"前端","slug":"前端","permalink":"http://dong-e1.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"git","slug":"git","permalink":"http://dong-e1.github.io/tags/git/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://dong-e1.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"git","slug":"git","permalink":"http://dong-e1.github.io/tags/git/"}]}