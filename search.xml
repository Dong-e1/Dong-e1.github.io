<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基础用法</title>
    <url>/2021/05/20/Git/</url>
    <content><![CDATA[<h1 id="一-关于Git"><a href="#一-关于Git" class="headerlink" title="一.关于Git"></a>一.关于Git</h1><h2 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1. Git基础"></a>1. Git基础</h2><h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table>
<thead>
<tr>
<th>git仓库</th>
<th>暂存区</th>
<th>工作目录</th>
</tr>
</thead>
<tbody><tr>
<td>用于存放提交记录</td>
<td>临时存放被修改文件</td>
<td>被Git管理的项目目录</td>
</tr>
</tbody></table>
<h3 id="1-5-Git-的使用"><a href="#1-5-Git-的使用" class="headerlink" title="1.5 Git 的使用"></a>1.5 Git 的使用</h3><h4 id="1-5-1-Git-使用前配置"><a href="#1-5-1-Git-使用前配置" class="headerlink" title="1.5.1 Git 使用前配置"></a>1.5.1 Git 使用前配置</h4><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>
<ol>
<li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li>
<li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li>
<li>查看git配置信息：<code>git config --list</code>   </li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li><p>如果要对配置信息进行修改，重复上述命令即可。</p>
</li>
<li><p>配置只需要执行一次。</p>
</li>
</ol>
<h4 id="1-5-2-提交步骤"><a href="#1-5-2-提交步骤" class="headerlink" title="1.5.2 提交步骤"></a>1.5.2 提交步骤</h4><ol>
<li><code>git init</code> 初始化git仓库</li>
<li><code>git status</code> 查看文件状态</li>
<li><code>git add 文件列表</code> 追踪文件</li>
<li><code>git commit -m 提交信息</code>  向仓库中提交代码</li>
<li><code>git log</code> 查看提交记录</li>
</ol>
<h4 id="1-5-3-撤销"><a href="#1-5-3-撤销" class="headerlink" title="1.5.3 撤销"></a>1.5.3 撤销</h4><ul>
<li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p>
</li>
<li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p>
</li>
<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p>
</li>
</ul>
<h2 id="2-Git进阶"><a href="#2-Git进阶" class="headerlink" title="2. Git进阶"></a>2. Git进阶</h2><h3 id="2-1-分支"><a href="#2-1-分支" class="headerlink" title="2.1 分支"></a>2.1 分支</h3><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p>
<p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p>
<h4 id="2-1-1-分支细分"><a href="#2-1-1-分支细分" class="headerlink" title="2.1.1 分支细分"></a>2.1.1 分支细分</h4><ol>
<li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p>
</li>
<li><p>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</p>
</li>
<li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p>
</li>
</ol>
<p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>
<h4 id="2-1-2-分支命令"><a href="#2-1-2-分支命令" class="headerlink" title="2.1.2 分支命令"></a>2.1.2 分支命令</h4><ul>
<li><p><code>git branch</code> 查看分支</p>
</li>
<li><p><code>git branch 分支名称</code> 创建分支</p>
</li>
<li><p><code>git checkout 分支名称</code> 切换分支</p>
</li>
<li><p><code>git merge 来源分支</code> 合并分支</p>
</li>
<li><p><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</p>
</li>
</ul>
<h3 id="2-2-暂时保存更改"><a href="#2-2-暂时保存更改" class="headerlink" title="2.2 暂时保存更改"></a>2.2 暂时保存更改</h3><p>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p>
<p>使用场景：分支临时切换</p>
<ul>
<li>存储临时改动：<code>git stash</code></li>
<li>恢复改动：<code>git stash pop</code></li>
</ul>
<h2 id="3-Github"><a href="#3-Github" class="headerlink" title="3. Github"></a>3. Github</h2><p>在版本控制系统中，大约90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。</p>
<p>只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。</p>
<h3 id="3-2-多人协作开发流程"><a href="#3-2-多人协作开发流程" class="headerlink" title="3.2 多人协作开发流程"></a>3.2 多人协作开发流程</h3><ul>
<li>A在自己的计算机中创建本地仓库</li>
<li>A在github中创建远程仓库</li>
<li>A将本地仓库推送到远程仓库</li>
<li>B克隆远程仓库到本地进行开发</li>
<li>B将本地仓库中开发的内容推送到远程仓库</li>
<li>A将远程仓库中的最新内容拉去到本地</li>
</ul>
<h3 id="3-3-创建仓库"><a href="#3-3-创建仓库" class="headerlink" title="3.3 创建仓库"></a>3.3 创建仓库</h3><ol>
<li><p>git push 远程仓库地址 分支名称</p>
</li>
<li><p>git push 远程仓库地址别名 分支名称</p>
</li>
<li><p>git push -u 远程仓库地址别名 分支名称</p>
<p> -u 记住推送地址及分支，下次推送只需要输入git push即可</p>
</li>
<li><p>git remote add 远程仓库地址别名 远程仓库地址</p>
</li>
</ol>
<h3 id="3-4-拉取操作"><a href="#3-4-拉取操作" class="headerlink" title="3.4 拉取操作"></a>3.4 拉取操作</h3><h4 id="3-4-1-克隆仓库"><a href="#3-4-1-克隆仓库" class="headerlink" title="3.4.1 克隆仓库"></a>3.4.1 克隆仓库</h4><p>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></p>
<h4 id="3-4-2-拉取远程仓库中最新的版本"><a href="#3-4-2-拉取远程仓库中最新的版本" class="headerlink" title="3.4.2 拉取远程仓库中最新的版本"></a>3.4.2 拉取远程仓库中最新的版本</h4><p>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></p>
<h3 id="3-5-解决冲突"><a href="#3-5-解决冲突" class="headerlink" title="3.5 解决冲突"></a>3.5 解决冲突</h3><p>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</p>
<h3 id="3-6-跨团队协作"><a href="#3-6-跨团队协作" class="headerlink" title="3.6 跨团队协作"></a>3.6 跨团队协作</h3><ol>
<li>程序员 C fork仓库</li>
<li>程序员 C 将仓库克隆在本地进行修改</li>
<li>程序员 C 将仓库推送到远程</li>
<li>程序员 C 发起pull reqest</li>
<li>原仓库作者审核</li>
<li>原仓库作者合并代码</li>
</ol>
<h3 id="3-7-ssh免登陆"><a href="#3-7-ssh免登陆" class="headerlink" title="3.7 ssh免登陆"></a>3.7 ssh免登陆</h3><p>https协议仓库地址：<a href="https://github.com/itcast-frontEnd/git-demo.git">https://github.com/itcast-frontEnd/git-demo.git</a></p>
<p>生成秘钥：<code>ssh-keygen</code></p>
<p>秘钥存储目录：C:\Users\用户\.ssh</p>
<p>公钥名称：id_rsa.pub</p>
<p>私钥名称：id_rsa</p>
<h3 id="3-8-GIT忽略清单"><a href="#3-8-GIT忽略清单" class="headerlink" title="3.8 GIT忽略清单"></a>3.8 GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p>
<p>git忽略清单文件名称：**.gitignore**</p>
<p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
