<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基础用法</title>
    <url>/2021/05/20/Git/</url>
    <content><![CDATA[<h1 id="一-关于Git"><a href="#一-关于Git" class="headerlink" title="一.关于Git"></a>一.关于Git</h1><h2 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1. Git基础"></a>1. Git基础</h2><h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table>
<thead>
<tr>
<th>git仓库</th>
<th>暂存区</th>
<th>工作目录</th>
</tr>
</thead>
<tbody><tr>
<td>用于存放提交记录</td>
<td>临时存放被修改文件</td>
<td>被Git管理的项目目录</td>
</tr>
</tbody></table>
<h3 id="1-5-Git-的使用"><a href="#1-5-Git-的使用" class="headerlink" title="1.5 Git 的使用"></a>1.5 Git 的使用</h3><h4 id="1-5-1-Git-使用前配置"><a href="#1-5-1-Git-使用前配置" class="headerlink" title="1.5.1 Git 使用前配置"></a>1.5.1 Git 使用前配置</h4><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>
<ol>
<li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li>
<li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li>
<li>查看git配置信息：<code>git config --list</code>   </li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li><p>如果要对配置信息进行修改，重复上述命令即可。</p>
</li>
<li><p>配置只需要执行一次。</p>
</li>
</ol>
<h4 id="1-5-2-提交步骤"><a href="#1-5-2-提交步骤" class="headerlink" title="1.5.2 提交步骤"></a>1.5.2 提交步骤</h4><ol>
<li><code>git init</code> 初始化git仓库</li>
<li><code>git status</code> 查看文件状态</li>
<li><code>git add 文件列表</code> 追踪文件</li>
<li><code>git commit -m 提交信息</code>  向仓库中提交代码</li>
<li><code>git log</code> 查看提交记录</li>
</ol>
<h4 id="1-5-3-撤销"><a href="#1-5-3-撤销" class="headerlink" title="1.5.3 撤销"></a>1.5.3 撤销</h4><ul>
<li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p>
</li>
<li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p>
</li>
<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p>
</li>
</ul>
<h2 id="2-Git进阶"><a href="#2-Git进阶" class="headerlink" title="2. Git进阶"></a>2. Git进阶</h2><h3 id="2-1-分支"><a href="#2-1-分支" class="headerlink" title="2.1 分支"></a>2.1 分支</h3><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p>
<p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p>
<h4 id="2-1-1-分支细分"><a href="#2-1-1-分支细分" class="headerlink" title="2.1.1 分支细分"></a>2.1.1 分支细分</h4><ol>
<li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p>
</li>
<li><p>开发分支（develop）：作为开发的分支，基于 master 分支创建。</p>
</li>
<li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p>
</li>
</ol>
<p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>
<h4 id="2-1-2-分支命令"><a href="#2-1-2-分支命令" class="headerlink" title="2.1.2 分支命令"></a>2.1.2 分支命令</h4><ul>
<li><p><code>git branch</code> 查看分支</p>
</li>
<li><p><code>git branch 分支名称</code> 创建分支</p>
</li>
<li><p><code>git checkout 分支名称</code> 切换分支</p>
</li>
<li><p><code>git merge 来源分支</code> 合并分支</p>
</li>
<li><p><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</p>
</li>
</ul>
<h3 id="2-2-暂时保存更改"><a href="#2-2-暂时保存更改" class="headerlink" title="2.2 暂时保存更改"></a>2.2 暂时保存更改</h3><p>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p>
<p>使用场景：分支临时切换</p>
<ul>
<li>存储临时改动：<code>git stash</code></li>
<li>恢复改动：<code>git stash pop</code></li>
</ul>
<h2 id="3-Github"><a href="#3-Github" class="headerlink" title="3. Github"></a>3. Github</h2><p>在版本控制系统中，大约90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。</p>
<p>只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。</p>
<h3 id="3-2-多人协作开发流程"><a href="#3-2-多人协作开发流程" class="headerlink" title="3.2 多人协作开发流程"></a>3.2 多人协作开发流程</h3><ul>
<li>A在自己的计算机中创建本地仓库</li>
<li>A在github中创建远程仓库</li>
<li>A将本地仓库推送到远程仓库</li>
<li>B克隆远程仓库到本地进行开发</li>
<li>B将本地仓库中开发的内容推送到远程仓库</li>
<li>A将远程仓库中的最新内容拉去到本地</li>
</ul>
<h3 id="3-3-创建仓库"><a href="#3-3-创建仓库" class="headerlink" title="3.3 创建仓库"></a>3.3 创建仓库</h3><ol>
<li><p>git push 远程仓库地址 分支名称</p>
</li>
<li><p>git push 远程仓库地址别名 分支名称</p>
</li>
<li><p>git push -u 远程仓库地址别名 分支名称</p>
<p> -u 记住推送地址及分支，下次推送只需要输入git push即可</p>
</li>
<li><p>git remote add 远程仓库地址别名 远程仓库地址</p>
</li>
</ol>
<h3 id="3-4-拉取操作"><a href="#3-4-拉取操作" class="headerlink" title="3.4 拉取操作"></a>3.4 拉取操作</h3><h4 id="3-4-1-克隆仓库"><a href="#3-4-1-克隆仓库" class="headerlink" title="3.4.1 克隆仓库"></a>3.4.1 克隆仓库</h4><p>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></p>
<h4 id="3-4-2-拉取远程仓库中最新的版本"><a href="#3-4-2-拉取远程仓库中最新的版本" class="headerlink" title="3.4.2 拉取远程仓库中最新的版本"></a>3.4.2 拉取远程仓库中最新的版本</h4><p>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></p>
<h3 id="3-5-解决冲突"><a href="#3-5-解决冲突" class="headerlink" title="3.5 解决冲突"></a>3.5 解决冲突</h3><p>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</p>
<h3 id="3-6-跨团队协作"><a href="#3-6-跨团队协作" class="headerlink" title="3.6 跨团队协作"></a>3.6 跨团队协作</h3><ol>
<li>程序员 C fork仓库</li>
<li>程序员 C 将仓库克隆在本地进行修改</li>
<li>程序员 C 将仓库推送到远程</li>
<li>程序员 C 发起pull reqest</li>
<li>原仓库作者审核</li>
<li>原仓库作者合并代码</li>
</ol>
<h3 id="3-7-ssh免登陆"><a href="#3-7-ssh免登陆" class="headerlink" title="3.7 ssh免登陆"></a>3.7 ssh免登陆</h3><p>https协议仓库地址：<a href="https://github.com/itcast-frontEnd/git-demo.git">https://github.com/itcast-frontEnd/git-demo.git</a></p>
<p>生成秘钥：<code>ssh-keygen</code></p>
<p>秘钥存储目录：C:\Users\用户\.ssh</p>
<p>公钥名称：id_rsa.pub</p>
<p>私钥名称：id_rsa</p>
<h3 id="3-8-GIT忽略清单"><a href="#3-8-GIT忽略清单" class="headerlink" title="3.8 GIT忽略清单"></a>3.8 GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p>
<p>git忽略清单文件名称：**.gitignore**</p>
<p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs的安装配置</title>
    <url>/2021/05/21/NodeJs%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1.软件下载"></a>1.软件下载</h2><p>[下载官网地址]：<a class="btn-beautify button--animated larger" href="https://nodejs.org/en/download/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<div class="note primary flat"><p>下载首选文件后缀为.msi文件的安装包</p>
</div>

<h2 id="2-软件介绍"><a href="#2-软件介绍" class="headerlink" title="2.软件介绍"></a>2.软件介绍</h2><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境，让JavaScript运行在服务端的开发平台，使JavaScript成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。Node 使用事件驱动，非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>
<h2 id="3-软件安装"><a href="#3-软件安装" class="headerlink" title="3.软件安装"></a>3.软件安装</h2><div class="note flat"><p>1.点击下载的.msi文件进行安装</p>
</div>

<img src="\img\md\node安装配置\安装.png" alt="I accept the" style="zoom: 67%;">

<div class="note flat"><p>2.一直点击Next，遇到【I accept the…】则勾选继续Next，遇到【Change…】则更改安装路径，不建议C盘</p>
</div>

<img src="\img\md\node安装配置\I accept the.png" alt="I accept the" style="zoom: 67%;">

<img src="\img\md\node安装配置\Change.png" alt="Change" style="zoom:67%;">

<div class="note flat"><p>3.一直Next，然后点击Install进行安装。</p>
</div>

<h2 id="4-软件检测"><a href="#4-软件检测" class="headerlink" title="4.软件检测"></a>4.软件检测</h2><p>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口</p>
<img src="\img\md\node安装配置\cmd.webp" alt="cmd" style="zoom: 67%;">

<p>按下图分别输入node -v和npm -v进行检测，出现版本号则说明安装成功</p>
<img src="\img\md\node安装配置\检测.png" alt="I accept the" style="zoom: 100%;">

<h2 id="5-Node配置"><a href="#5-Node配置" class="headerlink" title="5.Node配置"></a>5.Node配置</h2><div class="note warning flat"><p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，默认会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。所以要更改路径。</p>
</div>

<h3 id="缓存路径更改"><a href="#缓存路径更改" class="headerlink" title="缓存路径更改"></a>缓存路径更改</h3><ul>
<li>1.在node安装路径下创建node_cache和node_global两个文件夹</li>
</ul>
<img src="\img\md\node安装配置\创建文件夹.png" alt="创建文件夹" style="zoom:80%;">

<ul>
<li><p>2.创建完两个空文件夹之后，打开cmd命令窗口，输入</p>
<div class="note danger flat"><p>“”中的路径是你创建文件夹的路径，记住更改</p>
</div>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm config set prefix "D:\Develop\nodejs\node_global"</span><br><span class="line">npm config set cache "D:\Develop\nodejs\node_cache"</span><br></pre></td></tr></tbody></table></figure>

<p>这样此后所安装的模块都会安装到改路径下。</p>
</li>
</ul>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li><p>1.node_path环境变量:</p>
<p>打开系统属性-高级-环境变量，在系统变量中新建</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody><tr>
<td>NODE_PATH</td>
<td>D:\Develop\nodejs\node_global\node_modules（路径自己更改）</td>
</tr>
</tbody></table>
</li>
<li><p>2.编辑用户变量中 <code>path</code></p>
<p>将默认的 <code>C</code> 盘下 <code>APPData/Roaming\npm</code> 修改为 <code>D:\Develop\nodejs\node_global</code></p>
</li>
<li><p>3.使用淘宝NPM镜像</p>
<div class="note info flat"><p>由于国内网络环境限制问题，使用 <code>npm</code> 安装包时，会遇到时间长，甚至安装失败的问题，建议使用淘宝镜像，具体方法参见<a href="https://npm.taobao.org/">官网</a></p>
</div>

<p>可使用官方推荐的 <em>cnpm</em> 命令行工具代替默认的 <code>npm</code>:</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<div class="note danger flat"><p>注意：有时使用 cnpm 安装的路径可能回存在问题，例如在使用react-native开发应用时会出现问题。此时可以使用nrm切换淘宝源：</p>
</div>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npx nrm use taobao</span><br><span class="line"></span><br><span class="line">// 以下方式切换回官方源</span><br><span class="line">npx nrm use npm</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>4.测试</p>
<p>最后安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，<br>输入如下命令进行模块的全局安装：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install express -g     <span class="comment"># -g是全局安装的意思</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>​       查看安装路径是否有文件。</p>
<img src="\img\md\node安装配置\测试.png" alt="I accept the" style="zoom: 67%;">

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
</search>
